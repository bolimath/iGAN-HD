from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from .window_in import window_in
from .window_out import window_out
import time

class gui_design(QWidget):
	def __init__(self, wrapper, FLAGS):
		QWidget.__init__(self)
		self.wrapper = wrapper
		
		vbox1 = QVBoxLayout()
		vbox1.addStretch(1)
		
		#in-out windows
		hbox1 = QHBoxLayout()
		hbox1.addStretch(1)
		
		#in-window
		self.in_box = QGroupBox()
		self.in_box.setFlat(True)
		self.in_box.setStyleSheet('QGroupBox:title { subcontrol-origin: margin; subcontrol-position: top center; padding-left: 1000px; padding-right: 1000px; }')
		self.in_box.setTitle('Canvas')
		vbox2 = QVBoxLayout()
		self.in_window = window_in(wrapper, FLAGS)
		self.in_window.setFixedSize(FLAGS.win_width, FLAGS.win_height)
		vbox2.addWidget(self.in_window)
		hbox2 = QHBoxLayout()
		self.cColor_layer = QCheckBox("Color Layer")
		self.cColor_layer.setToolTip('Show color layer')
		self.cColor_layer.setChecked(True)
		self.cEdge_layer = QCheckBox("Edge Layer")
		self.cEdge_layer.setToolTip('Show edge layer')
		self.cEdge_layer.setChecked(True)
		self.cBackground = QCheckBox("Background")
		self.cBackground.setToolTip('Show background')
		self.cBackground.setChecked(True)
		hbox2.addStretch(1)
		hbox2.addWidget(self.cColor_layer)
		hbox2.addStretch(1)
		hbox2.addWidget(self.cEdge_layer)
		hbox2.addStretch(1)
		hbox2.addWidget(self.cBackground)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		self.in_box.setLayout(vbox2)
		hbox1.addWidget(self.in_box)
		hbox1.addStretch(1)
		
		#out-window
		self.out_box = QGroupBox()
		self.out_box.setFlat(True)
		self.out_box.setStyleSheet('QGroupBox:title { subcontrol-origin: margin; subcontrol-position: top center; padding-left: 1000px; padding-right: 1000px; }')
		self.out_box.setTitle('Output')
		vbox2 = QVBoxLayout()
		self.out_window = window_out(wrapper, FLAGS)
		self.out_window.setFixedSize(FLAGS.win_width, FLAGS.win_height)
		vbox2.addWidget(self.out_window)
		hbox2 = QHBoxLayout()
		self.bAdopt_result = QPushButton("Adopt")
		self.bAdopt_result.setToolTip('Adopt the result image as init image')
		self.bGenerate_result = QPushButton("Generate")
		self.bGenerate_result.setToolTip('Generate the result image')
		self.bSave_result = QPushButton("Save")
		self.bSave_result.setToolTip('Save the result image')
		hbox2.addStretch(1)
		hbox2.addWidget(self.bAdopt_result)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bGenerate_result)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bSave_result)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		self.out_box.setLayout(vbox2)
		hbox1.addWidget(self.out_box)
		hbox1.addStretch(1)
		vbox1.addLayout(hbox1)
		vbox1.addStretch(1)
		
		#tools
		hbox1 = QHBoxLayout()
		
		###color tools
		self.colortool_box = QGroupBox()
		self.colortool_box.setTitle('Color Tools')
		vbox2 = QVBoxLayout()
		vbox2.addStretch(1)
		
		#general tools
		hbox2 = QHBoxLayout()
		self.bLoad_color = QPushButton("Load")
		self.bLoad_color.setToolTip('Load color layer')
		self.bSave_color = QPushButton("Save")
		self.bSave_color.setToolTip('Save color layer')
		self.bUndo_color = QPushButton("Undo")
		self.bUndo_color.setToolTip('Undo the last edit in color layer')
		self.bClear_color = QPushButton("Clear")
		self.bClear_color.setToolTip('Clear color layer')
		hbox2.addStretch(1)
		hbox2.addWidget(self.bLoad_color)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bSave_color)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bUndo_color)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bClear_color)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(2)
		
		#edit tools
		self.tBrush= QRadioButton("Brush     ")
		self.tBrush.setToolTip('Change the color of a specific region')
		self.tColor= QRadioButton("Color     ")
		self.tColor.setToolTip('Change the color while preserving lightness')
		self.tEraser= QRadioButton("Eraser    ")
		self.tEraser.setToolTip('Clear a specific region')
		self.color_block = QPushButton()
		self.color_block.setStyleSheet("background-color: red")
		self.color_block.setFixedWidth(60)
		self.color_block.setFixedHeight(20)
		self.color_block.setToolTip('Choose brush color')
		self.tBrush.toggle()
		bGroup = QButtonGroup(self)
		bGroup.addButton(self.tBrush)
		bGroup.addButton(self.tColor)
		bGroup.addButton(self.tEraser)
		hbox2 = QHBoxLayout()
		hbox2.addWidget(self.tBrush)
		hbox2.addWidget(self.tColor)
		hbox2.addWidget(self.tEraser)
		hbox2.addStretch(1)
		hbox2.addWidget(self.color_block)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(2)
		
		#edit tools
		self.tBlend= QRadioButton("Blend     ")
		self.tBlend.setToolTip('Semi-transparent brush')
		self.tLighten= QRadioButton("Lighten   ")
		self.tLighten.setToolTip('Increase the lightness of a specific region')
		self.tDarken= QRadioButton("Darken    ")
		self.tDarken.setToolTip('Decrease the lightness of a specific region')
		self.tLiquify= QRadioButton("Liquify   ")
		self.tLiquify.setToolTip('Warp the image through a brush')
		bGroup.addButton(self.tBlend)
		bGroup.addButton(self.tLighten)
		bGroup.addButton(self.tDarken)
		bGroup.addButton(self.tLiquify)
		hbox2 = QHBoxLayout()
		hbox2.addWidget(self.tBlend)
		hbox2.addWidget(self.tLighten)
		hbox2.addWidget(self.tDarken)
		hbox2.addWidget(self.tLiquify)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(2)
		

		#advanced tools
		self.tPatch = QRadioButton("Patch     ")
		self.tPatch.setToolTip('Gradient domain blending')
		self.tPatrom = QRadioButton("Patch from")
		self.tPatrom.setToolTip('Gradient domain blending from external image')
		self.tMesh = QRadioButton("Mesh      ")
		self.tMesh.setToolTip('Warp the image through a regular mesh')
		self.tFremesh = QRadioButton("Free Mesh ")
		self.tFremesh.setToolTip('Warp the image through a user-defined mesh')
		bGroup.addButton(self.tPatch)
		bGroup.addButton(self.tPatrom)
		bGroup.addButton(self.tMesh)
		bGroup.addButton(self.tFremesh)
		hbox2 = QHBoxLayout()
		hbox2.addWidget(self.tPatch)
		hbox2.addWidget(self.tPatrom)
		hbox2.addWidget(self.tMesh)
		hbox2.addWidget(self.tFremesh)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(1)
		
		self.colortool_box.setLayout(vbox2)
		hbox1.addWidget(self.colortool_box)
		
		###edge tools
		self.edgetool_box = QGroupBox()
		self.edgetool_box.setTitle('Edge Tools')
		vbox2 = QVBoxLayout()
		vbox2.addStretch(1)
		
		#general tools
		self.bLoad_edge = QPushButton("Load")
		self.bLoad_edge.setToolTip('Load edge layer')
		self.bSave_edge = QPushButton("Save")
		self.bSave_edge.setToolTip('Save edge layer')
		self.bUndo_edge = QPushButton("Undo")
		self.bUndo_edge.setToolTip('Undo the last edit in edge layer')
		self.bClear_edge = QPushButton("Clear")
		self.bClear_edge.setToolTip('Clear edge layer')
		hbox2 = QHBoxLayout()
		hbox2.addStretch(1)
		hbox2.addWidget(self.bLoad_edge)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bSave_edge)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(2)
		hbox2 = QHBoxLayout()
		hbox2.addStretch(1)
		hbox2.addWidget(self.bUndo_edge)
		hbox2.addStretch(1)
		hbox2.addWidget(self.bClear_edge)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(2)
		
		#edit tools
		self.tBrush_edge= QRadioButton("Brush")
		self.tBrush_edge.setToolTip('Draw some edge')
		self.tEraser_edge= QRadioButton("Eraser")
		self.tEraser_edge.setToolTip('Clear some region')
		bGroup.addButton(self.tBrush_edge)
		bGroup.addButton(self.tEraser_edge)
		hbox2 = QHBoxLayout()	
		hbox2.addStretch(1)
		hbox2.addWidget(self.tBrush_edge)
		hbox2.addStretch(1)
		hbox2.addWidget(self.tEraser_edge)
		hbox2.addStretch(1)
		vbox2.addLayout(hbox2)
		vbox2.addStretch(1)
		
		self.edgetool_box.setLayout(vbox2)
		hbox1.addWidget(self.edgetool_box)
		hbox1.addStretch(1)
		
		vbox1.addLayout(hbox1)
		vbox1.addStretch(1)	
		
		#window size
		self.setLayout(vbox1)
		mainWidth = FLAGS.win_width*2 + 100
		mainHeight = FLAGS.win_height + 260
		self.setGeometry(0, 0, mainWidth, mainHeight)
		self.setFixedSize(self.width(), self.height())
		self.wrapper.start()
		self.in_window.update()
		self.out_window.update()
		
		#connect signals and slots
		self.color_block.clicked.connect(self.in_window.change_color)
		self.in_window.update_color.connect(self.color_block.setStyleSheet)
		self.in_window.update_image.connect(self.out_window.reset)
		
		self.cColor_layer.stateChanged.connect(self.enable_color_layer)
		self.cEdge_layer.stateChanged.connect(self.enable_edge_layer)
		self.cBackground.stateChanged.connect(self.enable_bg_layer)
		
		self.tBrush.clicked.connect(self.in_window.use_brush)
		self.tColor.clicked.connect(self.in_window.use_color)
		self.tEraser.clicked.connect(self.in_window.use_eraser)
		self.tBlend.clicked.connect(self.in_window.use_blend)
		self.tLighten.clicked.connect(self.in_window.use_lighten)
		self.tDarken.clicked.connect(self.in_window.use_darken)
		self.tLiquify.clicked.connect(self.in_window.use_liquify)
		self.tBrush_edge.clicked.connect(self.in_window.use_brush_edge)
		self.tEraser_edge.clicked.connect(self.in_window.use_eraser_edge)
		self.tPatch.clicked.connect(self.in_window.use_patch)
		self.tPatrom.clicked.connect(self.in_window.use_patch_from)
		self.tMesh.clicked.connect(self.in_window.use_mesh)
		self.tFremesh.clicked.connect(self.in_window.use_free_mesh)
		
		self.bAdopt_result.clicked.connect(self.in_window.adopt_result)
		self.bGenerate_result.clicked.connect(self.in_window.generate_result)
		self.bSave_result.clicked.connect(self.out_window.save)
		self.bLoad_color.clicked.connect(self.in_window.load_color)
		self.bSave_color.clicked.connect(self.in_window.save_color)
		self.bUndo_color.clicked.connect(self.in_window.undo_color)
		self.bClear_color.clicked.connect(self.in_window.clear_color)
		self.bLoad_edge.clicked.connect(self.in_window.load_edge)
		self.bSave_edge.clicked.connect(self.in_window.save_edge)
		self.bUndo_edge.clicked.connect(self.in_window.undo_edge)
		self.bClear_edge.clicked.connect(self.in_window.clear_edge)

	def enable_color_layer(self):
		self.in_window.layer_color = self.cColor_layer.isChecked()
		self.in_window.update()
	def enable_edge_layer(self):
		self.in_window.layer_edge = self.cEdge_layer.isChecked()
		self.in_window.update()
	def enable_bg_layer(self):
		self.in_window.layer_bg = self.cBackground.isChecked()
		self.in_window.update()

